/*
Copyright 2021 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/
package test

import (
	"k8gbterratest/utils"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestFullFailover(t *testing.T) {
	t.Parallel()
	const host = "terratest-failover.cloud.example.com"
	const gslbPath = "../examples/failover.yaml"

	instance1, err := utils.NewWorkflow(t, "k3d-test-gslb1", 5053).
		WithGslb(gslbPath, host).
		WithTestApp().
		Start()
	require.NoError(t, err)
	defer instance1.Kill()
	instance2, err := utils.NewWorkflow(t, "k3d-test-gslb2", 5054).
		WithGslb(gslbPath, host).
		WithTestApp().
		Start()
	require.NoError(t, err)
	defer instance2.Kill()

	instance1LocalTargets := instance1.GetLocalTargets()
	instance2LocalTargets := instance2.GetLocalTargets()

	t.Run("failover on two concurrent clusters with podinfo running", func(t *testing.T) {
		_, err = instance1.WaitForExpected(instance1LocalTargets)
		require.NoError(t, err)
		_, err = instance2.WaitForExpected(instance1LocalTargets)
		require.NoError(t, err)
	})

	t.Run("kill podinfo on the second cluster", func(t *testing.T) {
		instance2.StopTestApp()
		ip1, err := instance2.WaitForGSLB(instance1)
		require.NoError(t, err)
		ip2, err := instance1.WaitForGSLB(instance2)
		require.NoError(t, err)
		require.True(t, utils.EqualStringSlices(instance1LocalTargets, ip1))
		require.True(t, utils.EqualStringSlices(instance1LocalTargets, ip2))
	})

	t.Run("kill podinfo on the first cluster", func(t *testing.T) {
		instance1.StopTestApp()
		ip2, err := instance1.WaitForGSLB(instance2)
		require.NoError(t, err)
		ip1, err := instance2.WaitForGSLB(instance1)
		require.NoError(t, err)
		assert.Nil(t, ip1)
		assert.Nil(t, ip2)
	})

	t.Run("start podinfo on the second cluster", func(t *testing.T) {
		instance2.StartTestApp()
		ip2, err := instance2.WaitForGSLB(instance1)
		require.NoError(t, err)
		ip1, err := instance1.WaitForGSLB(instance2)
		require.NoError(t, err)
		require.True(t, utils.EqualStringSlices(ip1, instance2LocalTargets))
		require.True(t, utils.EqualStringSlices(ip2, instance2LocalTargets))
	})

	t.Run("start podinfo on the first cluster", func(t *testing.T) {
		instance1.StartTestApp()
		ip1, err := instance1.WaitForGSLB()
		require.NoError(t, err)
		ip2, err := instance1.WaitForExpected(ip1)
		require.NoError(t, err)
		require.True(t, utils.EqualStringSlices(ip1, instance1LocalTargets))
		require.True(t, utils.EqualStringSlices(ip2, instance1LocalTargets))
	})
}
