/*
Copyright 2021 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/providers/assistant/iassistant.go

// Package assistant is a generated GoMock package.
package assistant

import (
	reflect "reflect"
	time "time"

	v1beta1 "github.com/AbsaOSS/k8gb/api/v1beta1"
	gomock "github.com/golang/mock/gomock"
	endpoint "sigs.k8s.io/external-dns/endpoint"
)

// MockIAssistant is a mock of IAssistant interface.
type MockIAssistant struct {
	ctrl     *gomock.Controller
	recorder *MockIAssistantMockRecorder
}

// MockIAssistantMockRecorder is the mock recorder for MockIAssistant.
type MockIAssistantMockRecorder struct {
	mock *MockIAssistant
}

// NewMockIAssistant creates a new mock instance.
func NewMockIAssistant(ctrl *gomock.Controller) *MockIAssistant {
	mock := &MockIAssistant{ctrl: ctrl}
	mock.recorder = &MockIAssistantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAssistant) EXPECT() *MockIAssistantMockRecorder {
	return m.recorder
}

// CoreDNSExposedIPs mocks base method.
func (m *MockIAssistant) CoreDNSExposedIPs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoreDNSExposedIPs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CoreDNSExposedIPs indicates an expected call of CoreDNSExposedIPs.
func (mr *MockIAssistantMockRecorder) CoreDNSExposedIPs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoreDNSExposedIPs", reflect.TypeOf((*MockIAssistant)(nil).CoreDNSExposedIPs))
}

// GetExternalTargets mocks base method.
func (m *MockIAssistant) GetExternalTargets(host string, fakeDNSEnabled bool, extClusterNsNames map[string]string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalTargets", host, fakeDNSEnabled, extClusterNsNames)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetExternalTargets indicates an expected call of GetExternalTargets.
func (mr *MockIAssistantMockRecorder) GetExternalTargets(host, fakeDNSEnabled, extClusterNsNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalTargets", reflect.TypeOf((*MockIAssistant)(nil).GetExternalTargets), host, fakeDNSEnabled, extClusterNsNames)
}

// GslbIngressExposedIPs mocks base method.
func (m *MockIAssistant) GslbIngressExposedIPs(gslb *v1beta1.Gslb) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GslbIngressExposedIPs", gslb)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GslbIngressExposedIPs indicates an expected call of GslbIngressExposedIPs.
func (mr *MockIAssistantMockRecorder) GslbIngressExposedIPs(gslb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GslbIngressExposedIPs", reflect.TypeOf((*MockIAssistant)(nil).GslbIngressExposedIPs), gslb)
}

// InspectTXTThreshold mocks base method.
func (m *MockIAssistant) InspectTXTThreshold(fqdn string, fakeDNSEnabled bool, splitBrainThreshold time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectTXTThreshold", fqdn, fakeDNSEnabled, splitBrainThreshold)
	ret0, _ := ret[0].(error)
	return ret0
}

// InspectTXTThreshold indicates an expected call of InspectTXTThreshold.
func (mr *MockIAssistantMockRecorder) InspectTXTThreshold(fqdn, fakeDNSEnabled, splitBrainThreshold interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectTXTThreshold", reflect.TypeOf((*MockIAssistant)(nil).InspectTXTThreshold), fqdn, fakeDNSEnabled, splitBrainThreshold)
}

// RemoveEndpoint mocks base method.
func (m *MockIAssistant) RemoveEndpoint(endpointName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEndpoint", endpointName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEndpoint indicates an expected call of RemoveEndpoint.
func (mr *MockIAssistantMockRecorder) RemoveEndpoint(endpointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEndpoint", reflect.TypeOf((*MockIAssistant)(nil).RemoveEndpoint), endpointName)
}

// SaveDNSEndpoint mocks base method.
func (m *MockIAssistant) SaveDNSEndpoint(namespace string, i *endpoint.DNSEndpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDNSEndpoint", namespace, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDNSEndpoint indicates an expected call of SaveDNSEndpoint.
func (mr *MockIAssistantMockRecorder) SaveDNSEndpoint(namespace, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDNSEndpoint", reflect.TypeOf((*MockIAssistant)(nil).SaveDNSEndpoint), namespace, i)
}
